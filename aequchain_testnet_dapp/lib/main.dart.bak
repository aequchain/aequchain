import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(const AequChainTestnetApp());
}

class AequChainTestnetApp extends StatelessWidget {
  const AequChainTestnetApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'aequchain Testnet',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.light,
        scaffoldBackgroundColor: Colors.white,
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
        ),
      ),
      home: const TestnetHome(),
    );
  }
}

class TestnetHome extends StatelessWidget {
  const TestnetHome({super.key});

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isMobile = screenWidth < 768;
    
    return Scaffold(
      body: Column(
        children: [
          // Demo banner - fixed at top
          AnimatedContainer(
            duration: const Duration(milliseconds: 377),
            curve: Curves.easeInOut,
            width: double.infinity,
            padding: EdgeInsets.symmetric(
              vertical: isMobile ? 10 : 13,
              horizontal: isMobile ? 8 : 13,
            ),
            color: Colors.red[700],
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.warning_amber_rounded,
                  color: Colors.white,
                  size: isMobile ? 16 : 21,
                ),
                SizedBox(width: isMobile ? 8 : 13),
                Flexible(
                  child: Text(
                    '⚠️  DEMO MODE - NO REAL VALUE - EPHEMERAL ONLY  ⚠️',
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: isMobile ? 10 : 13,
                    ),
                    textAlign: TextAlign.center,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
          ),
          // Scrollable content
          Expanded(
            child: SingleChildScrollView(
              physics: const BouncingScrollPhysics(),
              padding: EdgeInsets.symmetric(
                horizontal: isMobile ? 16 : 34,
                vertical: isMobile ? 21 : 34,
              ),
              child: Center(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(maxWidth: 1200),
                  child: Column(
                    children: [
                      const SizedBox(height: 21),
                      // Title with fade-in animation
                      TweenAnimationBuilder<double>(
                        tween: Tween(begin: 0.0, end: 1.0),
                        duration: const Duration(milliseconds: 610),
                        curve: Curves.easeOut,
                        builder: (context, value, child) {
                          return Opacity(
                            opacity: value,
                            child: Transform.translate(
                              offset: Offset(0, 20 * (1 - value)),
                              child: child,
                            ),
                          );
                        },
                        child: Text(
                          'aequchain',
                          style: TextStyle(
                            fontSize: isMobile ? 55 : 89,
                            fontWeight: FontWeight.bold,
                            letterSpacing: -2,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      const SizedBox(height: 13),
                      Text(
                        'Testnet Demo Environment',
                        style: TextStyle(
                          fontSize: isMobile ? 18 : 28,
                          color: Colors.grey[600],
                          letterSpacing: 0.5,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: isMobile ? 34 : 55),
                      _FeatureCard(),
                      SizedBox(height: isMobile ? 21 : 34),
                      _TestnetControls(),
                      const SizedBox(height: 55),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class _TestnetControls extends StatefulWidget {
  @override
  State<_TestnetControls> createState() => _TestnetControlsState();
}

class _TestnetControlsState extends State<_TestnetControls> {
  final TextEditingController _accountController = TextEditingController();
  final TextEditingController _fromController = TextEditingController();
  final TextEditingController _toController = TextEditingController();
  final TextEditingController _amountController = TextEditingController();
  String _status = '';
  String _balance = '';
  bool _loading = false;

  final String apiBase = 'http://localhost:3000/api/testnet';

  Future<void> _createAccount() async {
    if (_accountController.text.isEmpty) return;
    
    setState(() {
      _loading = true;
      _status = 'Creating account...';
    });

    try {
      final response = await http.post(
        Uri.parse('$apiBase/account/create'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'account_id': _accountController.text.trim(),
          'initial_balance': 1000,
        }),
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _status = '✅ Account "${data['account_id']}" created!\n'
            'Balance: ${data['balance']}\n'
            'Demo mode: ${data['demo_mode']}';
        _balance = data['balance'].toString();
      } else {
        _status = '❌ Error: ${response.body}';
      }
    } catch (e) {
      _status = '❌ Network error: $e\n'
          'Make sure backend is running on port 3000';
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _sendTransaction() async {
    if (_fromController.text.isEmpty || _toController.text.isEmpty) return;
    
    setState(() {
      _loading = true;
      _status = 'Sending transaction...';
    });

    try {
      final response = await http.post(
        Uri.parse('$apiBase/transaction/send'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'from': _fromController.text.trim(),
          'to': _toController.text.trim(),
          'amount': int.tryParse(_amountController.text.trim()) ?? 0,
        }),
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _status = '✅ Transaction complete!\n'
            'From: ${data['from']}\n'
            'To: ${data['to']}\n'
            'Amount: ${data['amount']}';
      } else {
        final errorData = json.decode(response.body);
        _status = '❌ Error: ${errorData['message'] ?? response.body}';
      }
    } catch (e) {
      _status = '❌ Network error: $e\n'
          'Make sure backend is running on port 3000';
    } finally {
      setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isMobile = screenWidth < 768;
    
    return AnimatedContainer(
      duration: const Duration(milliseconds: 377),
      curve: Curves.easeInOut,
      child: Card(
        elevation: 1,
        shadowColor: Colors.black.withOpacity(0.05),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
          side: BorderSide(color: Colors.grey[200]!),
        ),
        child: Padding(
          padding: EdgeInsets.all(isMobile ? 16 : 21),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Header
              Row(
                children: [
                  TweenAnimationBuilder<double>(
                    tween: Tween(begin: 0.0, end: 1.0),
                    duration: const Duration(milliseconds: 610),
                    builder: (context, value, child) {
                      return Transform.rotate(
                        angle: value * 6.28,
                        child: child,
                      );
                    },
                    child: const Icon(Icons.flash_on, size: 21),
                  ),
                  const SizedBox(width: 13),
                  Expanded(
                    child: Text(
                      'Testnet Operations',
                      style: TextStyle(
                        fontSize: isMobile ? 18 : 21,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                'Ephemeral testnet - all data lost on restart',
                style: TextStyle(
                  fontSize: isMobile ? 11 : 13,
                  color: Colors.grey[600],
                ),
              ),
              SizedBox(height: isMobile ? 16 : 21),
              
              // Account creation section
              _buildSection(
                context,
                title: '1. Create Account',
                isMobile: isMobile,
                child: Column(
                  children: [
                    TextField(
                      controller: _accountController,
                      decoration: InputDecoration(
                        labelText: 'Account ID',
                        hintText: 'alice',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(5),
                        ),
                        contentPadding: EdgeInsets.symmetric(
                          horizontal: 13,
                          vertical: isMobile ? 12 : 16,
                        ),
                      ),
                    ),
                    const SizedBox(height: 13),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _loading ? null : _createAccount,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.black,
                          foregroundColor: Colors.white,
                          padding: EdgeInsets.symmetric(
                            vertical: isMobile ? 14 : 16,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(5),
                          ),
                        ),
                        child: _loading
                            ? const SizedBox(
                                height: 20,
                                width: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.white,
                                  ),
                                ),
                              )
                            : const Text(
                                'Create Account',
                                style: TextStyle(fontWeight: FontWeight.w600),
                              ),
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: isMobile ? 16 : 21),
              
              // Transaction section
              _buildSection(
                context,
                title: '2. Send Transaction',
                isMobile: isMobile,
                child: Column(
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: TextField(
                    controller: _fromController,
                    decoration: const InputDecoration(
                      labelText: 'From',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: _toController,
                    decoration: const InputDecoration(
                      labelText: 'To',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                SizedBox(
                  width: 100,
                  child: TextField(
                    controller: _amountController,
                    decoration: const InputDecoration(
                      labelText: 'Amount',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                ),
                const SizedBox(width: 13),
                ElevatedButton(
                  onPressed: _loading ? null : _sendTransaction,
                  child: const Text('Send'),
                ),
              ],
            ),
            
            if (_status.isNotEmpty) ...[
              const SizedBox(height: 21),
              Container(
                padding: const EdgeInsets.all(13),
                decoration: BoxDecoration(
                  color: Colors.blue[50],
                  borderRadius: BorderRadius.circular(5),
                  border: Border.all(color: Colors.blue[200]!),
                ),
                child: Text(
                  _status,
                  style: const TextStyle(fontSize: 13, fontFamily: 'monospace'),
                ),
              ),
            ],
            
            const SizedBox(height: 21),
            const Text(
              'API Endpoints Ready:\n'
              '• POST /api/testnet/account/create\n'
              '• POST /api/testnet/transaction/send\n'
              '• GET  /api/testnet/stats\n'
              '• POST /api/testnet/content/publish\n'
              '• GET  /api/testnet/content/list',
              style: TextStyle(fontSize: 13, color: Colors.grey, fontFamily: 'monospace'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _accountController.dispose();
    _fromController.dispose();
    _toController.dispose();
    _amountController.dispose();
    super.dispose();
  }
}

class _FeatureCard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(34),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '✓ Foundation Complete',
              style: TextStyle(fontSize: 21, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 21),
            _buildFeature('Identity System', '3-tier verification'),
            _buildFeature('AequNet', 'Decentralized content distribution'),
            _buildFeature('Pledges', 'Funding mechanisms'),
            _buildFeature('Testnet', 'Account-chain consensus'),
            _buildFeature('API Types', 'Complete specifications'),
            const SizedBox(height: 21),
            const Text(
              'Backend: Placeholder (API server pending)\nSee IMPLEMENTATION-PLAN-COMPLETE.md',
              style: TextStyle(fontSize: 13, color: Colors.blue, fontStyle: FontStyle.italic),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFeature(String title, String desc) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: Row(
        children: [
          const Icon(Icons.check_circle, color: Colors.green, size: 21),
          const SizedBox(width: 13),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title, style: const TextStyle(fontWeight: FontWeight.bold)),
                Text(desc, style: const TextStyle(fontSize: 13, color: Colors.grey)),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
